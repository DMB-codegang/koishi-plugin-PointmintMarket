import { Context, Schema } from 'koishi'
import { MarketItemRegisterOptions } from '../types'

// 插件配置
export interface Config {
  /** 是否自动注册示例商品 */
  autoRegisterItems: boolean
  /** 示例商品价格 */
  exampleItemPrice: number
  /** 是否启用调试日志 */
  debug: boolean
}

export const Config: Schema<Config> = Schema.object({
  autoRegisterItems: Schema.boolean()
    .default(true)
    .description('是否自动注册示例商品'),
  exampleItemPrice: Schema.number()
    .default(100)
    .description('示例商品价格'),
  debug: Schema.boolean()
    .default(false)
    .description('是否启用调试日志')
})

export const name = 'pointmintmarket-example'
export const description = '积分商城示例插件 - 展示如何使用积分商城API'

// 依赖pointmintmarket插件
export const inject = {
  required: ['market', 'points']
}

export function apply(ctx: Context, config: Config) {
  const logger = ctx.logger('pointmintmarket-example')
  
  // 示例商品ID
  const EXAMPLE_ITEM_ID = 'example-item-1'
  const EXAMPLE_ITEM_ID_2 = 'example-item-2'
  
  // 在插件启动时注册示例商品
  ctx.on('ready', async () => {
    if (config.autoRegisterItems) {
      await registerExampleItems()
      logger.info('示例商品已注册')
    }
  })
  
  // 注册示例商品
  async function registerExampleItems() {
    try {
      // 示例商品1 - 基础商品
      const item1: MarketItemRegisterOptions = {
        id: EXAMPLE_ITEM_ID,
        name: '示例商品1',
        description: '这是一个基础示例商品，展示商品注册的基本用法',
        price: config.exampleItemPrice,
        category: '示例分类',
        tags: ['示例', '基础'],
        stock: 10,
        // 购买回调函数
        onPurchase: async (userId, username, transactionId) => {
          logger.info(`用户 ${username}(${userId}) 购买了示例商品1，交易ID: ${transactionId}`)
          // 这里可以添加购买后的逻辑，比如发放物品、增加权限等
          
          // 返回成功的反馈信息
          return { code: 200, msg: '兑换成功', data: { itemType: 'basic' } }
        }
      }
      
      // 注册商品1
      await ctx.market.registerItem('pointmintmarket-example', item1)
      
      // 示例商品2 - 高级商品
      const item2: MarketItemRegisterOptions = {
        id: EXAMPLE_ITEM_ID_2,
        name: '示例商品2',
        description: '这是一个高级示例商品，展示商品注册的高级用法',
        price: config.exampleItemPrice * 2,
        category: '示例分类',
        tags: ['示例', '高级'],
        stock: 5,
        metadata: {
          // 可以存储任意与商品相关的数据
          itemType: 'premium',
          effectDuration: '7d',
          customData: {
            color: 'gold',
            level: 3
          }
        },
        // 购买回调函数
        onPurchase: async (userId, username, transactionId) => {
          logger.info(`用户 ${username}(${userId}) 购买了示例商品2，交易ID: ${transactionId}`)
          
          // 这里可以添加购买后的逻辑
          // 例如：给用户发放奖励
          try {
            // 作为示例，我们给用户返还一些积分作为奖励
            const bonusPoints = Math.floor(config.exampleItemPrice * 0.1)
            await ctx.points.add(userId, transactionId + '-bonus', bonusPoints, 'pointmintmarket-example-bonus')
            
            logger.info(`用户 ${username} 获得了 ${bonusPoints} 积分的购买奖励`)
            // 返回成功的反馈信息，包含奖励数据
            return { 
              code: 200, 
              msg: '兑换成功，已发放购买奖励', 
              data: { bonusPoints } 
            }
          } catch (error) {
            logger.error('处理购买奖励时出错:', error)
            // 返回部分成功的反馈信息
            return { 
              code: 206, 
              msg: '商品兑换成功，但奖励发放失败', 
              data: { error: error.message } 
            }
          }
        }
      }
      
      // 注册商品2
      await ctx.market.registerItem('pointmintmarket-example', item2)
      
    } catch (error) {
      logger.error('注册示例商品时出错:', error)
    }
  }
  
  // 注册示例命令
  const cmd = ctx.command('商城示例', '积分商城示例插件命令')
  
  // 查询用户积分
  cmd.subcommand('.积分', '查询当前积分')
    .action(async ({ session }) => {
      if (!session.userId) {
        return '无法识别您的用户ID，请确保您已登录'
      }
      
      const points = await ctx.points.get(session.userId)
      return `您当前的积分余额: ${points} 积分`
    })
  
  // 更新商品
  cmd.subcommand('.更新商品', '更新示例商品信息')
    .action(async ({ session }) => {
      try {
        // 更新商品1的价格和描述
        await ctx.market.updateItem('pointmintmarket-example', EXAMPLE_ITEM_ID, {
          price: config.exampleItemPrice + 50,
          description: '这是一个已更新的示例商品描述'
        })
        
        return '示例商品已更新'
      } catch (error) {
        logger.error('更新商品时出错:', error)
        return '更新商品时出错，请查看日志'
      }
    })
  
  // 查询购买记录
  cmd.subcommand('.购买记录', '查询示例商品的购买记录')
    .action(async ({ session }) => {
      if (!session.userId) {
        return '无法识别您的用户ID，请确保您已登录'
      }
      
      // 从数据库中查询购买记录
      const records = await ctx.database.get('market_purchases', { 
        userId: session.userId,
        plugin: 'pointmintmarket-example'
      })
      
      if (records.length === 0) {
        return '您还没有购买过示例商品'
      }
      
      let reply = '您的示例商品购买记录:\n\n'
      
      records.forEach((record, index) => {
        const date = new Date(record.purchaseTime)
        const formattedDate = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`
        
        reply += `${index + 1}. ${record.itemName}\n`
        reply += `   价格: ${record.price} 积分\n`
        reply += `   购买时间: ${formattedDate}\n`
        if (index < records.length - 1) reply += '\n'
      })
      
      return reply
    })
  
  // 删除商品
  cmd.subcommand('.删除商品', '删除示例商品')
    .action(async () => {
      try {
        await ctx.market.removeItem('pointmintmarket-example', EXAMPLE_ITEM_ID)
        await ctx.market.removeItem('pointmintmarket-example', EXAMPLE_ITEM_ID_2)
        
        return '示例商品已删除'
      } catch (error) {
        logger.error('删除商品时出错:', error)
        return '删除商品时出错，请查看日志'
      }
    })
  
  // 重新注册商品
  cmd.subcommand('.重新注册', '重新注册示例商品')
    .action(async () => {
      try {
        await registerExampleItems()
        return '示例商品已重新注册'
      } catch (error) {
        logger.error('重新注册商品时出错:', error)
        return '重新注册商品时出错，请查看日志'
      }
    })
}